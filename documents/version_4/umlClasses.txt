@startuml

skinparam class{
  BackgroundColor<<AFaire>> Pink
  BorderColor<<AFaire>> Black
  BackgroundColor<<Nouveau>> Cyan
  BorderColor<<Nouveau>> Blue
}

class JeuZ{
+ evoluer(Commande) : void
+ deplacerPerso(Commande) : void
+ etreFini() : boolean
+ getAventurier() : Personage
+ getLabyrinthe() : Labyrinthe
}

class Personnage{
- posX : int
- posY : int 
- pv : int 
- vieMax : int 
- mort : boolean
+ Personnage(int, int)
+ deplacer(int, int)
+ gagnerVie(int)
+ prendreDegats(int)
+ getX() : int
+ getY() : int
+ getPv() : int 
+ getVieMax() : int
+ etreMort() : boolean
}

abstract class Case{
- x : int 
- y : int 
- franchissable : boolean
+ Case(int, int, boolean)
+ getX() : int 
+ getY() : int
+ estFranchissable() : boolean
}

class Labyrinthe{
- xLong : int
- yLong : int
+ Labyrinthe(String)
+ estAccessible(int, int) : boolean
+ estUnPiege(int, int) : boolean
+ getTailleX() : int
+ getTailleY() : int
+ getTableauCases() : Case[][]
}

class DessinZ{
+ DessinZ(JeuZ)
+ dessiner(BufferedImage) : void
}

class Mur {
+ Sol(int, int)
}

class Sol {
+ Mur(int, int)
}

class Passage <<AFaire>>{}

class Piege{
- estAmorce : boolean
+ Piege(int, int)
}

Labyrinthe "0" -> "*" Case : -cases

Mur --|> Case
Sol --|> Case
Piege --|> Case
Passage --|> Case


DessinZ "*" -> "1" JeuZ : -jeu
JeuZ "1" -left> "1" Personnage : -aventurier
JeuZ "*" -> "1" Labyrinthe : -niveaux

@enduml
